Parameters:
  Username:
    Type: String
    
  Tag:
    Type: String
    Default: latest

  DesiredCount:
    Type: Number
    Default: 0

  Cluster:
    Type: String
    
  VpcId:
    Type: AWS::EC2::VPC::Id
    
  LoadBalancer:
    Type: String

  ExposedPort:
    Type: Number
    
  SecurityGroupALB:
    Type: String

Resources:
  SecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
        CidrIp: "0.0.0.0/0"
        IpProtocol: "TCP"
        FromPort: !Ref ExposedPort
        ToPort: !Ref ExposedPort
        GroupId: !Ref SecurityGroupALB
  
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref AWS::StackName
      Cluster: !Ref Cluster
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Image: !Sub ${Username}/${AWS::StackName}:${Tag}
          Essential: true
          Memory: 128
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: Tag
              Value: !Ref Tag
              
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ExposedPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref AWS::StackName
      VpcId: !Ref VpcId
      Port: !Ref ExposedPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
